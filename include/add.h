#ifndef ADD_H
#define ADD_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * 计算两个整数的和。
 *
 * @param a 第一个加数。
 * @param b 第二个加数。
 * @return 两个整数的和。
 */
int add(int a, int b);

/**
在 C 语言中，判断系统的架构可以通过检查预定义的宏（macro），这些宏由编译器根据目标平台进行定义。
 不同的编译器和操作系统可能会定义不同的宏来表示相同的架构，但有一些常见的宏可以用来进行这种判断。

### 常用的预定义宏

以下是一些常用的预定义宏，它们可以帮助你判断正在编译的系统的CPU架构：

- `__x86_64__` 或 `__amd64__`：这些宏通常在编译器是为 x86-64 架构（常见于现代个人电脑和服务器）编译时定义。
- `__i386__`：这个宏在编译器是为 x86（32位）架构编译时定义。
- `__arm__`：这个宏在编译器是为 ARM 架构编译时定义。
- `__aarch64__`：这个宏在编译器是为 ARM64 架构（也称为 AArch64）编译时定义。
- `__powerpc__`：这个宏在编译器是为 PowerPC 架构编译时定义。
- `__mips__`：这个宏在编译器是为 MIPS 架构编译时定义。

### 注意事项

- 这些宏必须在编译时进行检查，因为它们是编译器根据编译目标平台定义的。
- 不同的编译器可能定义了不同的宏，所以有时可能需要查阅你所使用的编译器的文档来确认具体的宏名称。
- 该方法无法在程序运行时动态检测架构，因为它依赖于编译时的条件编译。

这种方法非常适合在编写需要根据不同架构进行特定优化的代码时使用。
 */
//void system();

#ifdef __cplusplus
}
#endif

#endif
